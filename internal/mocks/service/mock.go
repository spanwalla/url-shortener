// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=../mocks/service/mock.go -package=servicemocks
//

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockShortener is a mock of Shortener interface.
type MockShortener struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerMockRecorder
	isgomock struct{}
}

// MockShortenerMockRecorder is the mock recorder for MockShortener.
type MockShortenerMockRecorder struct {
	mock *MockShortener
}

// NewMockShortener creates a new mock instance.
func NewMockShortener(ctrl *gomock.Controller) *MockShortener {
	mock := &MockShortener{ctrl: ctrl}
	mock.recorder = &MockShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortener) EXPECT() *MockShortenerMockRecorder {
	return m.recorder
}

// Shorten mocks base method.
func (m *MockShortener) Shorten(ctx context.Context, uri string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", ctx, uri)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Shorten indicates an expected call of Shorten.
func (mr *MockShortenerMockRecorder) Shorten(ctx, uri any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockShortener)(nil).Shorten), ctx, uri)
}

// MockExpander is a mock of Expander interface.
type MockExpander struct {
	ctrl     *gomock.Controller
	recorder *MockExpanderMockRecorder
	isgomock struct{}
}

// MockExpanderMockRecorder is the mock recorder for MockExpander.
type MockExpanderMockRecorder struct {
	mock *MockExpander
}

// NewMockExpander creates a new mock instance.
func NewMockExpander(ctrl *gomock.Controller) *MockExpander {
	mock := &MockExpander{ctrl: ctrl}
	mock.recorder = &MockExpanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpander) EXPECT() *MockExpanderMockRecorder {
	return m.recorder
}

// Expand mocks base method.
func (m *MockExpander) Expand(ctx context.Context, alias string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expand", ctx, alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expand indicates an expected call of Expand.
func (mr *MockExpanderMockRecorder) Expand(ctx, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expand", reflect.TypeOf((*MockExpander)(nil).Expand), ctx, alias)
}
